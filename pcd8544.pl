#!perl
use v5.24;
use warnings;
use RPi::WiringPi;
use RPi::Const qw{ :all };

use constant SPI_DEV   => 0;
use constant SPI_SPEED => 1_000_000;
use constant LED       => 14;
use constant POWER     => 2;
use constant SCE       => 8;
use constant RST       => 24;
use constant DC        => 23;

# Derived from the Perl 5 Raptor logo by Sebastian Riedel, and converted using 
# the online tool at www.riyas.org.  CC-SA license.
my @PIC_OUT = (
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x7c, 0x3c, 0x1c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x7c, 0x38, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x78, 0xc8, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0x78, 0x78, 0x3c, 0x3c, 0x3c, 0x1e, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x3e, 0x7f, 0x7b, 0xe9, 0x53, 0x0b, 0x06, 0x0e, 0x0f, 0x0f, 0x01, 0xc3, 0xe3, 0xe7, 0x6f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x0f, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x0e, 0x03, 0xff, 0x01, 0x7f, 0x08, 0x00, 0x07, 0x1f, 0xff, 0xff, 0xf3, 0x00, 0x83, 0xcf, 0xdf, 0xdf, 0x1f, 0xfe, 0xfe, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0c, 0x24, 0x3c, 0x3f, 0x3f, 0x0f, 0x00, 0x20, 0x20, 0x37, 0x3f, 0x3f, 0x3f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
);


sub init_wiring
{
	my $spi = RPi::SPI->new( SPI_DEV, SPI_SPEED );

    my ($pwr_pin, $rst_pin, $dc_pin, $led_pin) = map {
        my $pin = RPi::Pin->new( $_ );
        $pin->mode( OUTPUT );
        $pin->write( LOW );
        $pin;
    } (POWER, RST, DC, LED);

    return ($spi, $pwr_pin, $rst_pin, $dc_pin, $led_pin);
}

sub init_display
{
    my ($spi, $dc_pin, $pwr_pin, $rst_pin, $led_pin) = @_;
    $pwr_pin->write( HIGH );
    $rst_pin->write( HIGH );
    sleep 5;

    $rst_pin->write( LOW );
    sleep 1;

    $rst_pin->write( HIGH );
    sleep 5;

    send_extended_command( $spi, $dc_pin, 0x14 ); # Set bias 1:48
    send_extended_command( $spi, $dc_pin, 0xBC ); # Set Vop
    send_command( $spi, $dc_pin, 0x40 ); # Set Y addr
    send_command( $spi, $dc_pin, 0x80 ); # Set X addr
    # Doubling up, because that's what Python lib does
    send_command( $spi, $dc_pin, 0x40 ); # Set Y addr
    send_command( $spi, $dc_pin, 0x80 ); # Set X addr

    $led_pin->write( HIGH );
    return 1;
}

sub send_image
{
    my ($spi, $dc_pin, $img) = @_;
    $dc_pin->write( HIGH );
    $spi->rw( $img, scalar @$img );
    return 1;
}

sub send_extended_command
{
    my ($spi, $dc_pin, $cmd) = @_;
    say "Sending extended command: $cmd {";
    send_command( $spi, $dc_pin, 0x21 );
    send_command( $spi, $dc_pin, $cmd );
    send_command( $spi, $dc_pin, 0x20 );
    send_command( $spi, $dc_pin, 0x0C );
    say "}";
    return 1;
}

sub send_command
{
    my ($spi, $dc_pin, $cmd) = @_;
    say "Sending command: $cmd";
    $dc_pin->write( LOW );
    $spi->rw( [ $cmd ], 1  );
    return 1;
}


{
    my ($spi, $pwr_pin, $rst_pin, $dc_pin, $led_pin) = init_wiring();
    init_display( $spi, $dc_pin, $pwr_pin, $rst_pin, $led_pin );
    send_image( $spi, $dc_pin, \@PIC_OUT );
}
